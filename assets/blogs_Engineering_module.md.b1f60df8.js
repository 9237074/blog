import{_ as o,c as i,o as r,Q as e,k as l,a}from"./chunks/framework.3debe746.js";const q=JSON.parse('{"title":"模块化","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/Engineering/module.md","filePath":"blogs/Engineering/module.md"}'),n={name:"blogs/Engineering/module.md"},t=e('<h1 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h1><h2 id="标准与规范" tabindex="-1">标准与规范 <a class="header-anchor" href="#标准与规范" aria-label="Permalink to &quot;标准与规范&quot;">​</a></h2><h3 id="commonjs-同步模块加载模块" tabindex="-1">CommonJS 同步模块加载模块 <a class="header-anchor" href="#commonjs-同步模块加载模块" aria-label="Permalink to &quot;CommonJS 同步模块加载模块&quot;">​</a></h3><ul><li>一个文件就是一个模块</li><li>每个模块都有单独的作用域</li><li>通过module.exports导出成员</li><li>通过require函数载入模块</li></ul><h4 id="amd-异步" tabindex="-1">AMD 异步 <a class="header-anchor" href="#amd-异步" aria-label="Permalink to &quot;AMD 异步&quot;">​</a></h4><ul><li>AMD使用起来相对复杂</li><li>模块JS文件请求频繁</li></ul><h4 id="es-modules-vs-commonjs" tabindex="-1">ES Modules VS CommonJS <a class="header-anchor" href="#es-modules-vs-commonjs" aria-label="Permalink to &quot;ES Modules VS CommonJS&quot;">​</a></h4><h4 id="es-modules" tabindex="-1">ES Modules <a class="header-anchor" href="#es-modules" aria-label="Permalink to &quot;ES Modules&quot;">​</a></h4>',8),u=l("ul",null,[l("li",null,[a("基本特性 "),l("ul",null,[l("li",null,"通过给 script 添加 type = module 的属性")]),l("ol",null,[l("li",null,"ESM 自动采用严格模式，忽略‘use strict’"),l("li",null,"每个ES Module 都是运行在单独的私有作用域中"),l("li",null,"ESM是通过CORS的方式请求外部JS模块"),l("li",null,"ESM的script标签会延迟执行脚本")])]),l("li",null,[a("导出导入 "),l("ol",null,[l("li",{name:"",as:"",newName:""},"export { name } || export"),l("li",null,"import { name } from 'path'")])]),l("li",null,[a("注意事项 "),l("ol",null,[l("li",null,"export default { } 导出是对象"),l("li",null,"export 导出引用"),l("li",null,"import { name } from '完整路径名称'")])]),l("li",null,[a("ES Modules in Nodejs "),l("ol",null,[l("li",null,"*.mjs"),l("li",null,[a("注意事项 "),l("ol",null,[l("li",null,"ESM中可以导入CommonJS"),l("li",null,"CommonJS中不能导入ESM"),l("li",null,"CommonJS始终只会导出一个默认成员"),l("li",null,"注意import不是解构导出对象")])])])])],-1),s=e('<h3 id="webpack配置" tabindex="-1">WebPack配置 <a class="header-anchor" href="#webpack配置" aria-label="Permalink to &quot;WebPack配置&quot;">​</a></h3><h3 id="插件机制" tabindex="-1">插件机制 <a class="header-anchor" href="#插件机制" aria-label="Permalink to &quot;插件机制&quot;">​</a></h3><h3 id="打包过程和结果分析" tabindex="-1">打包过程和结果分析 <a class="header-anchor" href="#打包过程和结果分析" aria-label="Permalink to &quot;打包过程和结果分析&quot;">​</a></h3><h3 id="es-module标准" tabindex="-1">ES Module标准 <a class="header-anchor" href="#es-module标准" aria-label="Permalink to &quot;ES Module标准&quot;">​</a></h3><h3 id="资源模块的加载" tabindex="-1">资源模块的加载 <a class="header-anchor" href="#资源模块的加载" aria-label="Permalink to &quot;资源模块的加载&quot;">​</a></h3><h3 id="webpack高级特性" tabindex="-1">WebPack高级特性 <a class="header-anchor" href="#webpack高级特性" aria-label="Permalink to &quot;WebPack高级特性&quot;">​</a></h3><h3 id="webpack实现原理" tabindex="-1">WebPack实现原理 <a class="header-anchor" href="#webpack实现原理" aria-label="Permalink to &quot;WebPack实现原理&quot;">​</a></h3><h3 id="rollup、parcel" tabindex="-1">Rollup、Parcel <a class="header-anchor" href="#rollup、parcel" aria-label="Permalink to &quot;Rollup、Parcel&quot;">​</a></h3>',8),d=[t,u,s];function h(c,m,b,_,p,S){return r(),i("div",null,d)}const P=o(n,[["render",h]]);export{q as __pageData,P as default};

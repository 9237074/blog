import{_ as a,c as e,o as t,Q as o}from"./chunks/framework.3debe746.js";const m=JSON.parse('{"title":"函数","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/FrontEnd/javascript/03functional.md","filePath":"blogs/FrontEnd/javascript/03functional.md"}'),r={name:"blogs/FrontEnd/javascript/03functional.md"},i=o('<h1 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h1><h2 id="函数式编程" tabindex="-1">函数式编程 <a class="header-anchor" href="#函数式编程" aria-label="Permalink to &quot;函数式编程&quot;">​</a></h2><h3 id="什么是函数式编程" tabindex="-1">什么是函数式编程 <a class="header-anchor" href="#什么是函数式编程" aria-label="Permalink to &quot;什么是函数式编程&quot;">​</a></h3><p>函数式编程的思维方式：把现实世界的事物和事物之间的联系抽象到程序世界（对运算过程进行抽象）</p><ul><li>程序的本质：根据输入通过某种运算获得相应的输出，程序开发过程中会涉及很多有输入和输出的函数</li><li>x -&gt; f(联系、映射) -&gt; y = f(x)</li><li>函数式编程中的函数指的不是程序中的函数，而是数学中的函数\b，即映射关系</li><li>相同的输入始终要得到相同的输出（纯函数）</li><li>函数式编程用来描述数据（函数）之间的映射</li></ul><h2 id="柯里化" tabindex="-1">柯里化 <a class="header-anchor" href="#柯里化" aria-label="Permalink to &quot;柯里化&quot;">​</a></h2><h2 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h2><h2 id="消除和控制副作用" tabindex="-1">消除和控制副作用 <a class="header-anchor" href="#消除和控制副作用" aria-label="Permalink to &quot;消除和控制副作用&quot;">​</a></h2><h2 id="不可变的数据结构" tabindex="-1">不可变的数据结构 <a class="header-anchor" href="#不可变的数据结构" aria-label="Permalink to &quot;不可变的数据结构&quot;">​</a></h2><h2 id="常见库-lodash、ramda-js" tabindex="-1">常见库: Lodash、Ramda.js <a class="header-anchor" href="#常见库-lodash、ramda-js" aria-label="Permalink to &quot;常见库: Lodash、Ramda.js&quot;">​</a></h2>',10),l=[i];function n(s,h,d,c,_,u){return t(),e("div",null,l)}const b=a(r,[["render",n]]);export{m as __pageData,b as default};

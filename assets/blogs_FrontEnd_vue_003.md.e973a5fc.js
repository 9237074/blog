import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.3debe746.js";const h=JSON.parse('{"title":"数据驱动","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/FrontEnd/vue/003.md","filePath":"blogs/FrontEnd/vue/003.md"}'),p={name:"blogs/FrontEnd/vue/003.md"},o=l(`<h1 id="数据驱动" tabindex="-1">数据驱动 <a class="header-anchor" href="#数据驱动" aria-label="Permalink to &quot;数据驱动&quot;">​</a></h1><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><ul><li>数据驱动</li><li>响应式的核心原理</li><li>发布订阅模式和观察者模式</li></ul><h2 id="数据驱动-1" tabindex="-1">数据驱动 <a class="header-anchor" href="#数据驱动-1" aria-label="Permalink to &quot;数据驱动&quot;">​</a></h2><ul><li>数据响应式、双向绑定、数据驱动</li><li>数据响应式 <ul><li>数据模型仅仅是普通的JavaScript对象，而当我们修改数据时，视图会进行更新，避免了繁琐的DOM操作，提高开发效率</li></ul></li><li>双向绑定 <ul><li>数据改变，视图改变；视图改变，数据也随之改变</li><li>使用v-model在表单元素上创建双向数据绑定</li></ul></li><li>数据驱动是Vue最独特的特性之一 <ul><li>开发过程中仅需要关注数据本身，不需要关心数据是如何渲染到视图</li></ul></li></ul><h2 id="vue2-object-definepro" tabindex="-1">vue2 Object.DefinePro <a class="header-anchor" href="#vue2-object-definepro" aria-label="Permalink to &quot;vue2 Object.DefinePro&quot;">​</a></h2><h2 id="vue3-proxy" tabindex="-1">vue3 Proxy <a class="header-anchor" href="#vue3-proxy" aria-label="Permalink to &quot;vue3 Proxy&quot;">​</a></h2><h2 id="发布订阅模式-观察者模式" tabindex="-1">发布订阅模式 观察者模式 <a class="header-anchor" href="#发布订阅模式-观察者模式" aria-label="Permalink to &quot;发布订阅模式 观察者模式&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> eventHub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 发布</span></span>
<span class="line"><span style="color:#E1E4E8;">eventHub.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;eventName&#39;</span><span style="color:#E1E4E8;">,)</span></span>
<span class="line"><span style="color:#6A737D;">//订阅</span></span>
<span class="line"><span style="color:#E1E4E8;">eventHub.</span><span style="color:#B392F0;">$on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;eventName&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> eventHub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 发布</span></span>
<span class="line"><span style="color:#24292E;">eventHub.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;eventName&#39;</span><span style="color:#24292E;">,)</span></span>
<span class="line"><span style="color:#6A737D;">//订阅</span></span>
<span class="line"><span style="color:#24292E;">eventHub.</span><span style="color:#6F42C1;">$on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;eventName&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span></code></pre></div><h2 id="观察者模式" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式" aria-label="Permalink to &quot;观察者模式&quot;">​</a></h2><ul><li>观察者模式（订阅者） --Watch <ul><li>update(): 当时间发生时，，具体要做的事情</li></ul></li><li>目标(发布者) --Dep <ul><li>subs数组：存储所有的观察者</li><li>addSub(): 添加观察者</li><li>notify(): 当事件发生，调用所有观察者的update()方法</li></ul></li><li>没有事件中心</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;"> ( </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//1.通过属性保存选项的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$el </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> options.el </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> document.querySelector</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//2.把data中的成员转换成getter和setter，注入到vue实例中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//3.调用observer对象，监听数据的变化</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//4.调用compiler对象，解析指令和差值表达式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;"> ( </span><span style="color:#E36209;">options</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1.通过属性保存选项的数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.data </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$el </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> options.el </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> document.querySelector</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2.把data中的成员转换成getter和setter，注入到vue实例中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3.调用observer对象，监听数据的变化</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//4.调用compiler对象，解析指令和差值表达式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,12),e=[o];function t(c,r,i,E,y,u){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{h as __pageData,F as default};
